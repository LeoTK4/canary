name: Auto - Sync Fork

on:
  schedule:
    - cron: '0 */12 * * *'  # Agendado a cada 12 horas
    # Agendado às 07:00 toda segunda e quinta-feira

  workflow_dispatch:  # Clique no botão no repositório do GitHub

jobs:
  sync_with_upstream:
    runs-on: ubuntu-latest
    name: Sync main with upstream latest

    steps:
      # Passo 1: Executa uma ação de checkout padrão, fornecida pelo GitHub
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          ref: main
          # submodules: 'recursive'     ### pode ser necessário na sua situação
# Passo 4: Reorganiza seus commits locais sobre os commits do upstream
      - name: Rebase local changes on top of upstream
        run: |
          git config user.name "LeoTKBR"
          git config user.email "41605307+LeoTKBR@users.noreply.github.com"

          git pull --rebase upstream main
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Passo 2: Executa a ação de sincronização - especifica o repositório upstream, branch upstream para sincronizar e branch de destino da sincronização
      - name: Pull (Fast-Forward) upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v2.1
        with:
          upstream_repository: opentibiabr/canary
          upstream_branch: main
          target_branch: main
          git_pull_args: --ff-only                    # argumento opcional, padrão para 'pull' simples
          github_token: ${{ secrets.GITHUB_TOKEN }}   # opcional, para acessar repositórios que requerem autenticação

      # Passo 3: Display a message if 'sync' step had new commits (simple test)
      - name: Check for new commits
        if: steps.sync.outputs.has_new_commits
        run: echo "There were new commits."

# Passo 5: Exibe um carimbo de data e hora útil (não é necessário, apenas agradável)
      - name: Timestamp
        run: date
